#import "./fragments/vulnerability_details_fields.fragment.graphql"
#import "./fragments/vulnerability_details_list_nested.fragment.graphql"

query vulnerability($id: VulnerabilityID!) {
  vulnerability(id: $id) {
    # NEW FIELDS
    id
    createdAt
    severity
    pipeline {
      createdAt
      url: path
    }
    project {
      webUrl
      nameWithNamespace
    }
    title
    description
    reportType
    scanner {
      name
      url # not in current schema
      version # not in current schema
    }
    location {
      ... on VulnerabilityLocationContainerScanning {
        image
        operatingSystem
      }
      ... on VulnerabilityLocationCoverageFuzzing {
        blobPath
        endLine
        file
        startLine
        class: vulnerableClass
        method: vulnerableMethod
      }
      # VulnerabilityLocationDast only contains unnused fields
      ... on VulnerabilityLocationDependencyScanning {
        blobPath
      }
      ... on VulnerabilityLocationSast {
        blobPath
        endLine
        file
        startLine
        class: vulnerableClass
        method: vulnerableMethod
      }
      ... on VulnerabilityLocationSecretDetection {
        blobPath
        endLine
        file
        startLine
        class: vulnerableClass
        method: vulnerableMethod
      }
    }
    links {
      name
      url
    }
    identifiers {
      url
      name
    }
    evidence {
      request {
        body
        method
        url
        headers {
          name
          value
        }
      }
      response {
        body
        reasonPhrase
        statusCode
        headers {
          name
          value
        }
      }
      source {
        name
      }
      supportingMessages {
        name
        response {
          body
          reasonPhrase
          statusCode
          headers {
            name
            value
          }
        }
      }
    }
    assets {
      name
      url
    }
    solution
    remediations {
      diff
    }
    details {
      ...VulnerabilityDetailsFields
      # Nested fields
      ...VulnerabilityDetailsListNested
    }
    # NEW FIELDS END

    state
    confirmedAt
    # is this used as mergeRequestFeedback? If not, what is mergeRequestFeedback?
    mergeRequest {
      id
      createdAt
      webUrl
      author {
        name
        webPath
      }
    }
    # missing fields:
    # - remediations
    # - createMrUrl (do we need this?)
    # - projectDefaultBranch (I guess we can fetch this from another query e.g. project => defaultBranchId but I couldn't find it)
    # - pipeline.createdAt (referenced in status_description.vue)
    # - pipeline.url
    # - pipeline.id
    resolvedOnDefaultBranch
    issueLinks {
      # used in hasIssue()
      nodes {
        id
        issue {
          description
        }
      }
    }
    detectedAt
    dismissedAt
    resolvedAt
    # replaces dismissedById, confirmedById, resolvedById
    dismissedBy {
      id
    }
    confirmedBy {
      id
    }
    resolvedBy {
      id
    }
  }
}
