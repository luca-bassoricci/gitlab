import { nextTick } from 'vue';
import VulnerabilityListGraphql from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_list_graphql.vue';
import VulnerabilityReportDevelopment from 'ee/security_dashboard/components/group/vulnerability_report_development.vue';
import VulnerabilityCounts from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_counts.vue';
import VulnerabilityFilters from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_filters.vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';

describe('Vulnerability counts component', () => {
  let wrapper;

  const createWrapper = () => {
    wrapper = shallowMountExtended(VulnerabilityReportDevelopment, {
      provide: {
        canAdminVulnerability: true,
        hasProjects: true,
      },
    });
  };

  const findVulnerabilityCounts = () => wrapper.findComponent(VulnerabilityCounts);
  const findVulnerabilityFilters = () => wrapper.findComponent(VulnerabilityFilters);
  const findVulnerabilityListGraphql = () => wrapper.findComponent(VulnerabilityListGraphql);

  afterEach(() => {
    wrapper.destroy();
  });

  describe('vulnerability filters component', () => {
    it('will pass data from filters-changed event to the counts and list components', async () => {
      createWrapper();
      const data = { a: 1 };
      findVulnerabilityFilters().vm.$emit('filters-changed', data);

      await nextTick();

      expect(findVulnerabilityCounts().props('filters')).toBe(data);
      expect(findVulnerabilityListGraphql().props('filters')).toBe(data);
    });
  });
});
