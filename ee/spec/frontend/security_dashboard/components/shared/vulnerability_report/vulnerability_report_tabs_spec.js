import { shallowMount } from '@vue/test-utils';
import { GlTabs, GlTab } from '@gitlab/ui';
import VulnerabilityReportTabs from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tabs.vue';
import VulnerabilityReport from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report.vue';
import SurveyRequestBanner from 'ee/security_dashboard/components/shared/survey_request_banner.vue';
import projectVulnerabilitiesQuery from 'ee/security_dashboard/graphql/queries/project_vulnerabilities.query.graphql';

describe('Vulnerability report tabs component', () => {
  let wrapper;

  const createWrapper = ({ showProjectFilter = false } = {}) => {
    wrapper = shallowMount(VulnerabilityReportTabs, {
      propsData: {
        query: projectVulnerabilitiesQuery,
        showProjectFilter,
      },
    });
  };

  const findVulnerabilityReports = () => wrapper.findAllComponents(VulnerabilityReport);

  afterEach(() => {
    wrapper.destroy();
  });

  describe('survey request banner', () => {
    it('shows the survey request banner', () => {
      createWrapper();

      expect(wrapper.findComponent(SurveyRequestBanner).exists()).toBe(true);
    });
  });

  describe('tabs', () => {
    it('renders 2 tabs', () => {
      createWrapper();

      expect(wrapper.findComponent(GlTabs).exists()).toBe(true);
      const tabs = wrapper.findAllComponents(GlTab);

      expect(tabs).toHaveLength(2);
      expect(tabs.at(0).attributes('title')).toBe('Development vulnerabilities');
      expect(tabs.at(1).attributes('title')).toBe('Operational vulnerabilities');
    });
  });

  describe('vulnerability report components', () => {
    it('gets passed the query prop', () => {
      createWrapper();

      const reports = findVulnerabilityReports();
      reports.wrappers.forEach((report) => {
        expect(report.props('query')).toBe(projectVulnerabilitiesQuery);
      });
    });

    it.each([true, false])('gets passed %s for the showProjectFilter prop', (showProjectFilter) => {
      createWrapper({ showProjectFilter });

      const reports = findVulnerabilityReports();
      reports.wrappers.forEach((report) => {
        expect(report.props('showProjectFilter')).toBe(showProjectFilter);
      });
    });
  });
});
