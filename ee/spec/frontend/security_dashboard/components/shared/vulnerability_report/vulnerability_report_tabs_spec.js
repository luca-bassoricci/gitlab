import { shallowMount, createLocalVue } from '@vue/test-utils';
import { nextTick } from 'vue';
import { GlTabs, GlTab } from '@gitlab/ui';
import VueRouter from 'vue-router';
import VulnerabilityReportTabs from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tabs.vue';
import VulnerabilityReport from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report.vue';
import SurveyRequestBanner from 'ee/security_dashboard/components/shared/survey_request_banner.vue';
import projectVulnerabilitiesQuery from 'ee/security_dashboard/graphql/queries/project_vulnerabilities.query.graphql';
import { REPORT_TAB } from 'ee/security_dashboard/components/shared/vulnerability_report/constants';

const localVue = createLocalVue();
localVue.use(VueRouter);
const router = new VueRouter();

describe('Vulnerability report tabs component', () => {
  let wrapper;

  const createWrapper = ({ showProjectFilter = false } = {}) => {
    wrapper = shallowMount(VulnerabilityReportTabs, {
      localVue,
      router,
      propsData: {
        query: projectVulnerabilitiesQuery,
        showProjectFilter,
      },
    });
  };

  const findTabs = () => wrapper.findComponent(GlTabs);
  const findVulnerabilityReports = () => wrapper.findAllComponents(VulnerabilityReport);

  afterEach(() => {
    wrapper.destroy();
  });

  describe('survey request banner', () => {
    it('shows the survey request banner', () => {
      createWrapper();

      expect(wrapper.findComponent(SurveyRequestBanner).exists()).toBe(true);
    });
  });

  describe('tabs', () => {
    it('renders 2 tabs', () => {
      createWrapper();

      expect(findTabs().exists()).toBe(true);
      const tabs = wrapper.findAllComponents(GlTab);

      expect(tabs).toHaveLength(2);
      expect(tabs.at(0).attributes('title')).toBe('Development vulnerabilities');
      expect(tabs.at(1).attributes('title')).toBe('Operational vulnerabilities');
    });

    it.each`
      queryParam                | tabIndex
      ${undefined}              | ${0}
      ${REPORT_TAB.OPERATIONAL} | ${1}
    `(
      'shows tab with tabIndex $tabIndex when querystring is "$queryParam"',
      ({ queryParam, tabIndex }) => {
        router.replace({ query: { tab: queryParam } });
        createWrapper();

        expect(findTabs().props('value')).toBe(tabIndex);
      },
    );

    it.each`
      tabIndex | queryParam
      ${0}     | ${undefined}
      ${1}     | ${REPORT_TAB.OPERATIONAL}
    `(
      'changes the tab when tabIndex $tabIndex is clicked and sets querystring to "$queryParam"',
      async ({ tabIndex, queryParam }) => {
        createWrapper();
        findTabs().vm.$emit('input', tabIndex);
        await nextTick();

        expect(findTabs().props('value')).toBe(tabIndex);
        expect(router.currentRoute.query.tab).toBe(queryParam);
      },
    );
  });

  describe('vulnerability report components', () => {
    it('gets passed the query prop', () => {
      createWrapper();

      const reports = findVulnerabilityReports();
      reports.wrappers.forEach((report) => {
        expect(report.props('query')).toBe(projectVulnerabilitiesQuery);
      });
    });

    it.each([true, false])('gets passed %s for the showProjectFilter prop', (showProjectFilter) => {
      createWrapper({ showProjectFilter });

      const reports = findVulnerabilityReports();
      reports.wrappers.forEach((report) => {
        expect(report.props('showProjectFilter')).toBe(showProjectFilter);
      });
    });
  });
});
