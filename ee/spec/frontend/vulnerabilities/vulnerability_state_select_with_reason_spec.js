import { shallowMount } from '@vue/test-utils';
import VulnerabilityStateSelectWithReason from 'ee/vulnerabilities/components/vulnerability_state_select_with_reason.vue';
import {
  VULNERABILITY_DISMISSAL_REASON_NONE,
  VULNERABILITY_STATE_OBJECTS,
} from 'ee/vulnerabilities/constants';

describe('Vulnerability state with reason component', () => {
  let wrapper;

  const createWrapper = (stateItem, selectedReason, isSelected) => {
    // Create a dropdown that by default has the first vulnerability state selected.
    wrapper = shallowMount(VulnerabilityStateSelectWithReason, {
      propsData: { stateItem, selectedReason, isSelected },
    });
  };

  describe('when selected', () => {
    it('indicates the selected reason', () => {
      createWrapper(
        VULNERABILITY_STATE_OBJECTS.dismissed,
        VULNERABILITY_DISMISSAL_REASON_NONE,
        true,
      );
      const activeReason = wrapper.find('.active');
      expect(activeReason.text()).toBe(VULNERABILITY_DISMISSAL_REASON_NONE);

      const chevron = activeReason.find('.selected-icon');
      expect(chevron.exists()).toBe(true);
    });

    it('indicates the selected reason as "Custom" when a non-expected reason is given', () => {
      createWrapper(VULNERABILITY_STATE_OBJECTS.dismissed, 'Not Expected', true);
      const activeReason = wrapper.find('.active');
      expect(activeReason.text()).toBe('Custom');

      const chevron = activeReason.find('.selected-icon');
      expect(chevron.exists()).toBe(true);
    });
  });

  describe('when unselected', () => {
    it('does not indicate the selected reason', () => {
      createWrapper(
        VULNERABILITY_STATE_OBJECTS.dismissed,
        VULNERABILITY_DISMISSAL_REASON_NONE,
        false,
      );
      const activeReason = wrapper.find('.active');
      expect(activeReason.exists()).toBe(false);

      const reasonItems = wrapper.findAll('.vuln-state-reason');
      reasonItems.wrappers.forEach((reasonItem) => {
        expect(reasonItem.find('.selected-icon').exists()).toBe(false);
      });
    });

    it('does not indicate the selected reason as "Custom" when a non-expected reason is given', () => {
      createWrapper(VULNERABILITY_STATE_OBJECTS.dismissed, 'Not Expected', false);
      const activeReason = wrapper.find('.active');
      expect(activeReason.exists()).toBe(false);

      const reasonItems = wrapper.findAll('.vuln-state-reason');
      reasonItems.wrappers.forEach((reasonItem) => {
        expect(reasonItem.find('.selected-icon').exists()).toBe(false);
      });
    });
  });
});
