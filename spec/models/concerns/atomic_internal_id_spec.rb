# frozen_string_literal: true

require 'spec_helper'

describe AtomicInternalId do
  let(:milestone) { build(:milestone) }
  let(:iid) { double('iid', to_i: 42) }
  let(:external_iid) { 100 }
  let(:scope_attrs) { { project: milestone.project } }
  let(:usage) { :milestones }

  describe '#ensure_project_iid!' do
    subject { milestone.ensure_project_iid! }

    it 'generates a new value if non is present' do
      expect(InternalId).to receive(:generate_next).with(milestone, scope_attrs, usage, anything).and_return(iid)

      expect { subject }.to change { milestone.iid }.from(nil).to(iid.to_i)
    end

    it 'tracks the present value if not generated by InternalId.generate_text' do
      expect(InternalId).to receive(:track_greatest).once.with(milestone, scope_attrs, usage, external_iid, anything)

      milestone.iid = external_iid

      subject
    end

    it 'does not track the present value if generated by InternalId.generate_next' do
      milestone.ensure_project_iid!

      expect(InternalId).not_to receive(:track_greatest)

      subject
    end
  end
end
